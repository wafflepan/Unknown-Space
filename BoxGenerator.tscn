[gd_scene load_steps=14 format=2]

[ext_resource path="res://BoxGenerator.gd" type="Script" id=1]
[ext_resource path="res://box2.png" type="Texture" id=2]
[ext_resource path="res://telepad.png" type="Texture" id=3]
[ext_resource path="res://Box2.tscn" type="PackedScene" id=4]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

//  noise texture (see Dissolve.material for GUI Generated one or Main.gd::_on_reseed_noise_pressed() for scripted one)
uniform sampler2D noise_tex : hint_albedo;
// burn ramp (gradiant from some color to transparent) - see Dissolve.material for GUI generated one
uniform sampler2D burn_ramp : hint_albedo;
// size of burning path (0 is infinitely short)
uniform float burn_size : hint_range(0.1, 1);

// position (time) of burning
uniform float burn_position : hint_range(-1, 1);

void fragment()
{
	// get texture pixel color * tint
	// thats our result without burning effect.
	// We use COLOR as final color (we can use variable and assign it to COLOR at the end, but there is no reason to care)
	// TEXTURE is Sprite.Texture from GODOT
	// UV is UV from GODOT
	// At first, COLOR is filled with tint (Sprite -> Modulate) from GODOT (and from vertex shader).
	COLOR = texture(TEXTURE, UV) * COLOR;
	
	// get some noise minus our position in time (thats why burn_position is range(-1, 1))
	float test = texture(noise_tex, UV).r - burn_position;
	
	// if our noise is bigger then treshold
	if (test < burn_size) {
	
		// get burn color from ramp
		vec4 burn = texture(burn_ramp, vec2(test * (1f / burn_size), 0));

		// override result rgb color with burn rgb color (NOT alpha!)
		COLOR.rgb = burn.rgb;
		
		// and set alpha to lower one from texture or burn.
		// that means we keep transparent sprite (COLOR.a is lower) and transparent 'burned pathes' (burn.a is lower)
		COLOR.a = min(burn.a, COLOR.a);
	}
}"

[sub_resource type="Gradient" id=3]
offsets = PoolRealArray( 0, 0.196552, 0.617241, 1 )
colors = PoolColorArray( 0, 0, 0, 0, 1, 0.0980392, 0.0980392, 0.278431, 1, 0.046875, 0.650024, 0.593074, 1, 1, 1, 1 )

[sub_resource type="GradientTexture" id=4]
gradient = SubResource( 3 )

[sub_resource type="OpenSimplexNoise" id=5]

[sub_resource type="NoiseTexture" id=6]
noise = SubResource( 5 )

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/burn_size = 0.1
shader_param/burn_position = 0.0
shader_param/noise_tex = SubResource( 6 )
shader_param/burn_ramp = SubResource( 4 )

[sub_resource type="Animation" id=7]
resource_name = "Fadein"
tracks/0/type = "value"
tracks/0/path = NodePath("DissolveSprite:material:shader_param/burn_position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 1.0, 0.0 ]
}

[sub_resource type="Animation" id=8]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("DissolveSprite:material:shader_param/burn_position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0.0 ]
}

[sub_resource type="CapsuleShape2D" id=9]
radius = 9.0
height = 35.0

[node name="BoxGenerator" type="Node2D"]
script = ExtResource( 1 )
template = ExtResource( 4 )

[node name="Tween" type="Tween" parent="."]

[node name="Sprite" type="Sprite" parent="."]
texture = ExtResource( 3 )

[node name="DissolveSprite" type="Sprite" parent="."]
visible = false
material = SubResource( 2 )
position = Vector2( 0, 10 )
texture = ExtResource( 2 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
anims/Fadein = SubResource( 7 )
anims/RESET = SubResource( 8 )

[node name="Timer" type="Timer" parent="."]
wait_time = 3.0
autostart = true

[node name="CheckArea" type="Area2D" parent="."]
collision_layer = 9
collision_mask = 9

[node name="CollisionShape2D" type="CollisionShape2D" parent="CheckArea"]
position = Vector2( 0, 14 )
rotation = 1.5708
shape = SubResource( 9 )

[connection signal="timeout" from="Timer" to="." method="_on_Timer_timeout"]
